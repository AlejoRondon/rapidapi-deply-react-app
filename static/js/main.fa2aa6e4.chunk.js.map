{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","location","setLocation","tempC","setTempC","tempF","setTempF","conditions","setConditions","loading","setLoading","error","setError","className","onSubmit","e","preventDefault","axios","post","then","data","catch","console","log","finally","type","value","placeholder","onChange","target","style","color","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uSA4EeA,MAxEf,WAAgB,IAAD,EACiBC,IAAMC,SAAS,IADhC,mBACRC,EADQ,KACEC,EADF,OAEWH,IAAMC,SAAS,IAF1B,mBAERG,EAFQ,KAEDC,EAFC,OAGWL,IAAMC,SAAS,IAH1B,mBAGRK,EAHQ,KAGDC,EAHC,OAIqBP,IAAMC,SAAS,IAJpC,mBAIRO,EAJQ,KAIIC,EAJJ,OAKeT,IAAMC,UAAS,GAL9B,mBAKRS,EALQ,KAKCC,EALD,OAMWX,IAAMC,UAAS,GAN1B,mBAMRW,EANQ,KAMDC,EANC,KA4Bb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,oDAEF,8BACE,wDACA,yBAAKA,UAAU,gBAAf,wCACE,4BACE,0CACA,wCACA,4CACA,qDAGJ,0BAAMC,SAnCS,SAACC,GACpBA,EAAEC,iBACFN,GAAW,GACXE,GAAS,GAETK,IAAMC,KAAK,aAAc,CAAEjB,aACxBkB,MAAK,YAAa,IAAXC,EAAU,EAAVA,KACNhB,EAASgB,EAAKjB,OACdG,EAASc,EAAKf,OACdG,EAAcY,EAAKb,eAEpBc,OAAM,SAAAN,GACLH,GAAS,GACTU,QAAQC,IAAIR,MAEbS,SAAQ,WACPd,GAAW,QAoBT,kCACE,gDAEE,2BACEe,KAAK,OACLC,MAAOzB,EACP0B,YAAY,aACZC,SAAU,SAACb,GAAD,OAAOb,EAAYa,EAAEc,OAAOH,WAG1C,4BAAQD,KAAK,UAAb,iBAIJ,kDACChB,GAAW,uBAAGqB,MAAO,CAAEC,MAAO,SAAnB,4BACXpB,GAAS,uBAAGmB,MAAO,CAAEC,MAAO,QAAnB,2BAET5B,GAAS,2BAAIA,EAAJ,oBACTE,GAAS,2BAAIA,EAAJ,uBAETE,GAAc,2BAAIA,IACjBN,IAAaQ,GAAW,yDC1DduB,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdxB,OAAM,SAAAV,GACLW,QAAQX,MAAMA,EAAMmC,c","file":"static/js/main.fa2aa6e4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App() {\n  let [location, setLocation] = React.useState('')\n  let [tempC, setTempC] = React.useState('')\n  let [tempF, setTempF] = React.useState('')\n  let [conditions, setConditions] = React.useState('')\n  let [loading, setLoading] = React.useState(false)\n  let [error, setError] = React.useState(false)\n\n  const fetchWeather = (e) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(false)\n\n    axios.post('/api/route', { location })\n      .then(({data}) => {\n        setTempC(data.tempC)\n        setTempF(data.tempF)\n        setConditions(data.conditions)\n      })\n      .catch(e => {\n        setError(true)\n        console.log(e)\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Deploying React App</h1>\n      </header>\n      <main>\n        <h2>Check Your Local Weather</h2>\n        <div className='list-wrapper'>Enter a place. Valid entries include:\n          <ul>\n            <li>city,state</li>\n            <li>lat,long</li>\n            <li>city,country</li>\n            <li>US / CA postal code</li>\n          </ul>\n        </div>\n        <form onSubmit={fetchWeather}>\n          <fieldset>\n            <label>\n              Enter location\n              <input\n                type='text'\n                value={location}\n                placeholder='seattle,wa'\n                onChange={(e) => setLocation(e.target.value)}\n              />\n            </label>\n            <button type='submit'>Get Weather</button>\n          </fieldset>\n        </form>\n\n        <h2>Current Conditions</h2>\n        {loading && <p style={{ color: \"#CCC\" }}>Fetching weather data...</p>}\n        {error && <p style={{ color: \"red\" }}>Something went wrong...</p>}\n\n        {tempC && <p>{tempC} degrees Celcius</p>}\n        {tempF && <p>{tempF} degrees Fahrenheit</p>}\n\n        {conditions && <p>{conditions}</p>}\n        {!location && !loading && <p>Please enter a location</p>}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}